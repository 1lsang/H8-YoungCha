name: be-cd

on:
  push:
    branches:
      - dev/be
      - main

permissions:
  contents: read

env:
  DOCKER_COMPOSE_FILE: docker-compose.yml

defaults:
  run:
    working-directory: server

jobs:
  push-docker-image:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Create secret file
        run: |
          mkdir src/main/resources/secrets
          echo "${{ secrets.APPLICATION_ENV }}" > src/main/resources/secrets/application-env.yml

      - name: Build with Gradle
        run: ./gradlew clean bootJar

      - name: Docker build and push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}

  deploy:
    needs: [ push-docker-image ]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Copy docker compose & Scripts
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          source: './${{ env.DOCKER_COMPOSE_FILE }},./script'
          target: ${{ env.REPOSITORY }}

      - name: Deploy to dev
        uses: appleboy/ssh-action@master
        id: deploy-dev
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            
            if [ "$(docker ps -aqf name="^spring$")" ];
            then
              echo "> spring container 제거"
              docker stop spring
              docker rm spring
            else
              echo "> 구동 중인 spring container가 없으므로 종료하지 않습니다."
            fi
            
            if [[ "$(docker images -q ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest 2> /dev/null)" != "" ]]; then
              echo "> latest image 삭제"
              docker rmi ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest
            fi
            
            echo "> docker compose up"
            docker compose up -d --build spring
            
            docker image prune -f
            docker logout